import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@SpringBootApplication
@RestController
@RequestMapping("/api")
public class WishlistController {

    private Map<String, Map<String, List<String>>> userWishlists = new HashMap<>();

    @PostMapping("/wishlist")
    public ResponseEntity<String> createWishlist(@RequestBody WishlistRequest request) {
        String wishlistName = request.getWishlistName();
        String userId = request.getUserId();

        if (wishlistName == null || userId == null) {
            return ResponseEntity.badRequest().body("Wishlist name and user ID are required.");
        }

        if (!userWishlists.containsKey(userId)) {
            userWishlists.put(userId, new HashMap<>());
        }

        Map<String, List<String>> userWishlist = userWishlists.get(userId);
        if (userWishlist.containsKey(wishlistName)) {
            return ResponseEntity.badRequest().body("Wishlist name already exists for this user.");
        }

        userWishlist.put(wishlistName, List.of());
        return ResponseEntity.ok("Wishlist created successfully.");
    }

    @PostMapping("/wishlist/book")
    public ResponseEntity<String> addBookToWishlist(@RequestBody WishlistBookRequest request) {
        String bookId = request.getBookId();
        String wishlistId = request.getWishlistId();
        String userId = request.getUserId();

        if (bookId == null || wishlistId == null) {
            return ResponseEntity.badRequest().body("Book ID and Wishlist ID are required.");
        }

        if (!userWishlists.containsKey(userId) || !userWishlists.get(userId).containsKey(wishlistId)) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("User or wishlist not found.");
        }

        List<String> wishlist = userWishlists.get(userId).get(wishlistId);
        wishlist.add(bookId);
        return ResponseEntity.ok("Book added to wishlist successfully.");
    }

    @DeleteMapping("/wishlist/book")
    public ResponseEntity<String> removeBookFromWishlist(@RequestBody WishlistBookRequest request) {
        String bookId = request.getBookId();
        String wishlistId = request.getWishlistId();
        String userId = request.getUserId();

        if (bookId == null || wishlistId == null) {
            return ResponseEntity.badRequest().body("Book ID and Wishlist ID are required.");
        }

        if (!userWishlists.containsKey(userId) || !userWishlists.get(userId).containsKey(wishlistId)) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("User or wishlist not found.");
        }

        List<String> wishlist = userWishlists.get(userId).get(wishlistId);
        if (wishlist.remove(bookId)) {
            return ResponseEntity.ok("Book removed from wishlist successfully.");
        }

        return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Book not found in wishlist.");
    }

    @GetMapping("/wishlist/books/{wishlistId}")
    public ResponseEntity<List<String>> getBooksInWishlist(@PathVariable String wishlistId,
                                                           @RequestParam String userId) {
        if (!userWishlists.containsKey(userId) || !userWishlists.get(userId).containsKey(wishlistId)) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
        }

        List<String> wishlist = userWishlists.get(userId).get(wishlistId);
        return ResponseEntity.ok(wishlist);
    }

    public static void main(String[] args) {
        SpringApplication.run(WishlistController.class, args);
    }
}
